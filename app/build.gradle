plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.kapt)
    alias(libs.plugins.kotlin.parcelize)
    alias(libs.plugins.androidx.navigation.safeargs)
    alias(libs.plugins.spotless)
}

apply from: "${project.rootDir}/buildscripts/spotless.gradle"

android {
    compileSdk 33
    namespace "ru.stersh.retrosonic"

    defaultConfig {
        minSdk 21
        targetSdk 33

        vectorDrawables.useSupportLibrary = true

        applicationId namespace
        versionCode 1
        versionName '1.0.0-alpha'

        buildConfigField("String", "GOOGLE_PLAY_LICENSING_KEY", "\"${getProperty(getProperties('../public.properties'), 'GOOGLE_PLAY_LICENSE_KEY')}\"")
    }
    def signingProperties = getProperties('retro.properties')
    def releaseSigning
    if (signingProperties != null) {
        releaseSigning = signingConfigs.create("release") {
            storeFile file(getProperty(signingProperties, 'storeFile'))
            keyAlias getProperty(signingProperties, 'keyAlias')
            storePassword getProperty(signingProperties, 'storePassword')
            keyPassword getProperty(signingProperties, 'keyPassword')
        }
    } else {
        releaseSigning = signingConfigs.debug
    }
    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig releaseSigning
        }
        debug {
            minifyEnabled false
            shrinkResources false
            signingConfig releaseSigning
            applicationIdSuffix '.debug'
            versionNameSuffix ' DEBUG'
        }
    }

    buildFeatures {
        viewBinding true
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE', 'META-INF/NOTICE', 'META-INF/java.properties']
        }
    }
    lint {
        abortOnError true
        warning 'ImpliedQuantity', 'Instantiatable', 'MissingQuantity', 'MissingTranslation'
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    dependenciesInfo {
        includeInApk = false
        includeInBundle = false
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }
}

def getProperties(String fileName) {
    Properties properties = new Properties()
    def file = rootProject.file(fileName)
    if (file.exists()) {
        file.withInputStream { stream -> properties.load(stream) }
    } else {
        properties = null
    }
    return properties
}

static def getProperty(Properties properties, String name) {
    return properties?.getProperty(name) ?: "$name missing"
}

dependencies {
    implementation project(':appthemehelper')
    implementation project(':source:apisonic')
    implementation project(':core')
    implementation project(':player')
    implementation project(':provider')
    implementation project(':source:room')

    implementation(libs.kotlin.std.jdk8)
    implementation(libs.appcompat)
    implementation(libs.androidx.annotation)
    implementation(libs.recyclerview.core)
    implementation(libs.constraintlayout)
    implementation(libs.androidx.preferences)
    implementation(libs.androidx.gridlayout)
    implementation(libs.androidx.core)
    implementation(libs.androidx.palette)
    implementation(libs.androidx.splashscreen)
    implementation(libs.timber)

    implementation(libs.bundles.androidx.navigation)
    implementation(libs.bundles.adapterdelegates)
    implementation(libs.bundles.kotlin.coroutines)
    implementation(libs.bundles.koin)

    implementation(libs.lifecycle.viewmodel)
    implementation(libs.lifecycle.livedata)
    implementation(libs.lifecycle.common.java8)

    implementation(libs.material)

    implementation(libs.retrofit.core)
    implementation(libs.retrofit.converter.moshi)
    implementation(libs.retrofit.converter.gson)
    implementation(libs.logging.interceptor)

    implementation(libs.materialdialogs.core)
    implementation(libs.materialdialogs.input)
    implementation(libs.materialdialogs.color)

    implementation(libs.glide.core)
    kapt(libs.glide.compiler)
    implementation(libs.glide.okhttp3integration)

    implementation(libs.advrecyclerview)
    implementation(libs.fadingedgelayout)
    implementation(libs.keyboardvisibilityevent)
    implementation(libs.insetter)
    implementation(libs.slidableactivity)
    implementation(libs.materialintro)
    implementation(libs.fastscroll)
    implementation(libs.customactivityoncrash)
}
